from subprocess import call
from subprocess import Popen
from subprocess import check_output
from subprocess import PIPE
import sys

# VARIABLES
INTERFACE			= "mon0"
VERBOSE				= False
NETCTL_PROFILE		= "sssniff"			
NETCTL_SETTINGS		= "description='Profile generated by sssniff'\n"

# STRINGS
FAIL					= "[FAIL] "
SUCC					= "[OKAY] "
DEF						= "[ -- ] "
MON_SUCCESS				= SUCC + "Monitor setup "
MON_FAIL				= FAIL + "Monitor setup "
ENABLE_SUCCESS			= SUCC + "Enable monitor "
ENABLE_FAIL				= FAIL + "Enable monitor "
CONN_SUCCESS			= SUCC + "Connect to AP " 
CONN_FAIL				= FAIL + "Connect to AP " 
INTERFACE_COUNT_FAIL	= FAIL + "Not enough wireless adapters detected. Exiting...\n"
BANNER					= "\n"
BANNER					+= "***************************** \n"
BANNER					+= "*  Study Spot Sniffer v0.0  * \n"
BANNER					+= "***************************** \n"

# FUNCTIONS
def loadConfig():
	settingsFlag	= False
	netctlFlag		= False
	global NETCTL_SETTINGS

	config = open("sniffer.conf", "r")
	for line in config:
		if ( line.strip() != "" ):
			if ( line.strip()[0] != "#" ):
				if ( "!" in line ):
					settingsFlag = False
					netctlFlag   = False
					if ( "settings" in line ):
						settingsFlag = True
					if ( "netctl" in line ):
						netctlFlag = True
					continue

				if ( netctlFlag ):
					option = line.split("=")[0].strip()
					setting = line.split("=")[1].strip()

					NETCTL_SETTINGS += ( option + "=" + setting + "\n" )

				if ( settingsFlag ):
					option = line.split("=")[0].strip().lower()
					setting = line.split("=")[1].strip().lower()

					if option == "interface":
						INTERFACE = setting


def generateNetctlProfile( interface ):
	filePath = "/etc/netctl/" + NETCTL_PROFILE

	TEMP_NETCTL_SETTINGS = NETCTL_SETTINGS + ("Interface=" + interface)

	file = open(filePath, "w")
	file.write(TEMP_NETCTL_SETTINGS)
	file.close()

def getErrors(buffer):
	output = ""
	if ( len(buffer.stderr.peek(1)) != 0 ):
		for line in buffer.stderr:
			output += line.decode("utf-8")

	return output.split("\n")

def getOutput(buffer):
	output = ""
	if ( len(buffer.stdout.peek(1)) != 0 ):
		for line in buffer.stdout:
			output += line.decode("utf-8")

	return output.split("\n")

def parseErrors(errors):
	for line in errors:
		if ( "failed" in line ):
			if ( "Invalid" in line ):
				raise EnvironmentError ("Looks like there's already a monitor on this interface.")
			if ( "open files" in line ):
				raise EnvironmentError ("This netctl profile is already in use -- you may already be connected.")

def countInterfaces():
	count = 0

	cmdOutput = Popen(["iwconfig"], stdout=PIPE, stderr=PIPE)
	result = getOutput(cmdOutput)

	for line in result:
		if "wlan" in line:
			count += 1
	if (count < 2):
		sys.exit(INTERFACE_COUNT_FAIL)

	return count

def runCommand(command):

	cmdOutput	= Popen( command, stdout=PIPE, stderr=PIPE )
	result		= getErrors( cmdOutput )

	parseErrors( result )

# MAIN
def main():
	print ( BANNER )

	loadConfig()

	interface_count = countInterfaces()
	alreadyConnected = False

	for i in range( 0, interface_count ):

		setupWorked = False
		WLAN 		= "wlan" + str(i)

		# POPEN COMMANDS
		monitor_setup	= ["iw", "dev", WLAN, "interface", "add", INTERFACE, "type", "monitor"]
		monitor_enable	= ["ip", "link", "set", INTERFACE, "up"]
		disconnect_all	= ["netctl", "stop-all"]
		connect			= ["netctl", "start", NETCTL_PROFILE]

		try:
			runCommand( monitor_setup )
			setupWorked = True
			print ( MON_SUCCESS + WLAN + "\n")
		except EnvironmentError as e:
			print ( MON_FAIL + WLAN )
			print ( DEF + str(e) + "\n" )

		try:
			if ( setupWorked ):
				runCommand(monitor_enable)
				print ( ENABLE_SUCCESS + "\n" )
				continue
		except EnvironmentError as e:
			print ( ENABLE_FAIL )
			print ( DEF + str(e) + "\n" )

		if ( alreadyConnected ):
			continue

		try:
			generateNetctlProfile( WLAN )
			runCommand( disconnect_all )
			runCommand( connect )
			alreadyConnected = True
			print ( CONN_SUCCESS + NETCTL_PROFILE + "\n" )
		except EnvironmentError as e:
			print ( CONN_FAIL + NETCTL_PROFILE )
			print ( DEF + str(e) + "\n" )

	Popen(["python2", "/root/git/StudySniffer/StudySniffer.py"])

if __name__ == "__main__":
	if ("-v" in sys.argv):
		VERBOSE = True

	main()